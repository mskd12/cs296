%\DeclareGraphicsExtensions{.pdf,.png,.jpg}
\documentclass[11pt]{article}

\usepackage[top=0.75in, bottom=0.75in, left=0.5in, right=0.5in]{geometry} 
\usepackage{graphicx}
\usepackage{url}
\usepackage{indentfirst}

\begin{document}

\title{Profiling Analysis of the Box2d Simulation}

\author{Pratik Fegade 120050004\\
Krishna Deepak 120050057\\
Bharath Kumar 120050058\\}
\maketitle

\section{Introduction}
This report is our analysis of the timing data of the Box2D simulation obtained by using various utilities like gettimeofday(), the time command line utility and the profilers gprof and perf. Sections of the code that take up a significant amount of time to execute are identified and thus are they can be optimised further to reduce the running time of the simulation.

\section{Analysis of the Looptime and Related Data}

The data is obtained by running the simulation for some reruns for a particular number of steps and averaging over the reruns. Data for looptime, steptime, time required for position, collision and velocity updates was collected. The steptime is significantly high for low number of iterations (probably due to all the variable initializations required at the start of the simulation) and it falls quickly and stabilises. Similar but less pronounced effects are seem with the times required for velocity, postion and collision updates. Also the sum of the average times required for velocity, postion and collision updates signoficantly falls short of the average steptime suggesting that some other not examined function takes up significant amounts of time. For all the iteration values, the velocity update time is the highest while the collision update time is the lowest. A plot of these average times is shown below.
\\
\begin{center}
%	\includegraphics[width=12cm]{g04_plot02}
\end{center}
\indent The average steptime for a significant number of iterations is almost stable though it sometimes varies a lot over the reruns. This is demonstrated by plotting a frequency plot of the steptimes over the reruns for a particular value of the number of iterations (58 in our case). The plot as expected shows a concentrations of stetimes around the average steptime but it does have a significant tail as a result of some high values of the steptime.
\\
\indent The data was generated for 150 reruns for each iteration (1 to 1500). However, a plot of the line obtained by applying linear regression on  average steptime of randomly selected 15 reruns out of the 150 reruns shows stiking similarity to that obtained by regressing over the entire data. Hence it seems that the analysis would not differ much even if data is collected for a smaller number of reruns.
\\
\indent The data depends on the memory and the cpu load on the machine the simulation is being run on. The average times show a noticeable rise when the cpu is loaded with other processor intensive processes. The times in the case when there is a significant load on the memory are lesser than the case when the processor is loaded however are still higher than the case when the system is not loaded in the case of the memory or the processor. This is because the simulation is not as memory intensive as it is processor intensive.
\\
\indent The command line utility time gives 3 different times - real, user and sys times. The user time corresponds to actual time elapsed. The user time gives the time spent by the process that time is invoked on on the cpu while the system time gives the time the OS takes to perform tasks for the process. The real time thus can be affected by other processes running as it is the actual time interval. On invoking the time utility on the simulation it is observed that the looptime is smaller than the user time, which in turn is smaller than the real time. ALso the system time is very low are compared to the other times. The looptime is smaller than the user time as the simulation does other tasks (initialisations and related tasks like setting up standard utilities like stdin and stdout)%\cite{startOfCppprog} 
apart from just running the loop.


%\section{Analysis of Profiling Data}
%\bibliographystyle{plain}
%\bibliography{g04_prof_report_ref.bib}

\section{Analysis of the Debug Build}
We have run the base code for 50000 iterations, 3 reruns and profiled the code using perf.
Excluding the functions related to glui or glut, b2ContactSolver::SolveVelocityConstraints took the most percentage of time(about 22 \%) in all the 3 reruns. Following it, there are functions which perform operations *,-,+ which took  maximum amount of time. b2ContactSolver::SolveVelocityConstraints takes more time than b2ContactSolver::SolvePositionConstraints. This observation is consistent with the observations made in the 'Analysis of Release Build' and 'Analysis of the Looptime and Related Data'. Folowing it, there are functions relating to Collisions, Joints, Body, Vectors etc.


\end{document}
